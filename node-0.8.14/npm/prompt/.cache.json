{"_id":"prompt","_rev":"70-136efb78a9e1107e9dfd6095c46cc87a","name":"prompt","description":"A beautiful command-line prompt for node.js","dist-tags":{"latest":"0.2.8","stable":"0.2.6"},"versions":{"0.0.1":{"name":"prompt","version":"0.0.1","description":"Prompt the user of command line scripts while running.","modules":{"index":"./prompt.js"},"repository":{"type":"git","url":"http://github.com/jesusabdullah/node-prompt.git"},"author":{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com","url":"http://jesusabdullah.github.com"},"contributors":[{"name":"Peteris Krumins","url":"http://catonmat.net"}],"engine":["node >=0.1.100"],"_id":"prompt@0.0.1","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/prompt/-/prompt-0.0.1.tgz"},"directories":{}},"0.0.2":{"name":"prompt","version":"0.0.2","description":"Prompt the user of command line scripts while running.","modules":{"index":"./prompt.js"},"repository":{"type":"git","url":"http://github.com/jesusabdullah/node-prompt.git"},"author":{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com","url":"http://jesusabdullah.github.com"},"contributors":[{"name":"Peteris Krumins","url":"http://catonmat.net"}],"engine":["node >=0.1.100"],"_id":"prompt@0.0.2","engines":{"node":"*"},"_nodeSupported":true,"_npmVersion":"0.2.7-2","_nodeVersion":"v0.3.1-pre","dist":{"tarball":"http://registry.npmjs.org/prompt/-/prompt-0.0.2.tgz"},"directories":{}},"0.0.3":{"name":"prompt","version":"0.0.3","description":"Prompt the user of command line scripts while running.","main":"./prompt.js","repository":{"type":"git","url":"git://github.com/jesusabdullah/node-prompt.git"},"author":{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com","url":"http://jesusabdullah.github.com"},"contributors":[{"name":"Peteris Krumins","url":"http://catonmat.net"}],"engine":["node >=0.1.100"],"_id":"prompt@0.0.3","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","directories":{},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"2eaaedfb91d1b92cf65892ddf400a22f038414e2","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.0.3.tgz"}},"0.0.4":{"name":"prompt","version":"0.0.4","description":"Prompt the user of command line scripts while running.","main":"./prompt.js","repository":{"type":"git","url":"git://github.com/jesusabdullah/node-prompt.git"},"author":{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com","url":"http://jesusabdullah.github.com"},"contributors":[{"name":"Peteris Krumins","url":"http://catonmat.net"},{"name":"Lele 'El Dios'","url":"http://lele.amicofigo.com/"}],"engine":["node >=0.1.100"],"dependencies":{},"devDependencies":{},"_id":"prompt@0.0.4","engines":{"node":"*"},"_engineSupported":true,"_npmVersion":"1.0.3","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"1522ef6678bfd554717d06aa6c8ec4b3b202f5fc","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.0.4.tgz"},"scripts":{},"directories":{}},"0.1.0":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.0","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","winston":"0.2.x"},"main":"./lib/prompt","scripts":{"test":"vows test/*-test.js --spec"},"engines":{"node":">= 0.4.0"},"devDependencies":{},"_id":"prompt@0.1.0","_engineSupported":true,"_npmVersion":"1.0.6","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"a4a70d70b2fca1ceb57202474a7d854745b0c03c","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.0.tgz"},"directories":{}},"0.1.1":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.1","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/*-test.js --spec"},"engines":{"node":">= 0.4.0"},"_id":"prompt@0.1.1","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.10","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"a806a80cb434e3e5a7856b00540ed7be54af4cbf","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.1.tgz"},"directories":{}},"0.1.2":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.2","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/*-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.2","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"ae104a308644e60d8a60732182f833b7cc49d38c","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.2.tgz"},"directories":{}},"0.1.3":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.3","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.3","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.13","_nodeVersion":"v0.4.8","_defaultsLoaded":true,"dist":{"shasum":"2dec5ce9818ff01311fc49a0b9cac64da30f68ca","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.3.tgz"},"directories":{}},"0.1.4":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.4","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/home/josh/.npm/prompt/0.1.4/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.4","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.9","_defaultsLoaded":true,"dist":{"shasum":"1bfb57453a5dd2227cd9f798b089f6d783addd28","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.4.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.5":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.5","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.5/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.5","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"dad553e3b2fea8cc38fd16c891404821c4d212b8","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.5.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.7":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.7","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.3.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.7/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.7","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.4.10","_defaultsLoaded":true,"dist":{"shasum":"6841eacfe8374892427a06e0dc6c3447764a8b06","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.7.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.8":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.8","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.8/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.8","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"2ef4f72517f916020b99a309626390f6d176a1e5","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.8.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.9":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.9","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmJsonOpts":{"file":"/Users/Charlie/.npm/prompt/0.1.9/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"prompt@0.1.9","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.23","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"6eae83a38c116dfe6118f2603db0461c942936d6","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.9.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.10":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.10","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"},{"name":"Maciej Malecki","email":"maciej@nodejitsu.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},"_id":"prompt@0.1.10","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.101","_nodeVersion":"v0.4.13-pre","_defaultsLoaded":true,"dist":{"shasum":"a9108958c53be72173fefe4e8f7aa7e17fbf965e","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.10.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.11":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.11","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"},{"name":"Maciej Malecki","email":"maciej@nodejitsu.com"}],"repository":{"type":"git","url":"git://github.com/nodejitsu/node-prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.1.11","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.4.12","_defaultsLoaded":true,"dist":{"shasum":"eac1bb9730a4aefd8f458380aa8d0b381fe6bbed","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.11.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.1.12":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.1.12","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"contributors":[{"name":"Charlie Robbins","email":"charlie@nodejitsu.com"},{"name":"Joshua Holbrook","email":"josh.holbrook@gmail.com"},{"name":"Bradley Meck","email":"bradley.meck@gmail.com"},{"name":"Maciej Malecki","email":"maciej@nodejitsu.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"async":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.1.12","_engineSupported":true,"_npmVersion":"1.0.106","_nodeVersion":"v0.6.6","_defaultsLoaded":true,"dist":{"shasum":"d3114e4fb985ac66eaa35586dcb7b3fb3b27bfc6","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.1.12.tgz"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"directories":{}},"0.2.0":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.0","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"utile":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.5.x","revalidator":"0.1.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.2.0","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"ba04d352fffa89c61a5ea4abe0892dcda1f6d843","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.0.tgz"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Installation\n\n### Installing npm (node package manager)\n```\ncurl http://npmjs.org/install.sh | sh\n```\n\n### Installing prompt\n```\n[sudo] npm install prompt\n```\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\nvar prompt = require('prompt');\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get(['username', 'email'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  email: ' + result.email);\n})\n```\n\nThis will result in the following command-line output:\n\n```\n$ node examples/simple-prompt.js \nprompt: username: some-user\nprompt: email: some-user@some-place.org\nCommand-line input received:\n  username: some-user\n  email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\nvar schema = {\n  properties: {\n    name: {\n      pattern: /^[a-zA-Z\\s\\-]+$/,\n      message: 'Name must be only letters, spaces, or dashes',\n      required: true\n    },\n    password: {\n      hidden: true\n    }\n  }\n};\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: email, password\n//\nprompt.get(schema, function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  name: ' + result.name);\n  console.log('  password: ' + result.password);\n});\n```\n\nPretty easy right? The output from the above script is: \n\n```\n$ node examples/property-prompt.js\nprompt: name: nodejitsu000\nerror:  Invalid input for name\nerror:  Name must be only letters, spaces, or dashes\nprompt: name: Nodejitsu Inc\nprompt: password: \nCommand-line input received:\n  name: Nodejitsu Inc\n  password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n{\n  description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n  pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n  message: 'Password must be letters', // Warning message to display if validation fails.\n  hidden: true,                        // If true, characters entered will not be output to console.\n  default: 'lamepassword',             // Default value to use if no value is entered.\n  required: true                        // If true, value entered must be non-empty.\n}\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\nvar prompt = require('../lib/prompt');\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and password\n//\nprompt.get([{\n    name: 'username',\n    required: true\n  }, {\n    name: 'password',\n    hidden: true,\n    conform: function (value) {\n      return true;\n    }\n  }], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  password: ' + result.password);\n});\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n//prompt-override.js\n\nvar prompt = require('prompt'),\n    optimist = require('optimist')\n\n//\n// set the overrides\n//\nprompt.override = optimist.argv\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get(['username', 'email'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  email: ' + result.email);\n})\n\n//: node prompt-override.js --username USER --email EMAIL\n\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\nvar obj = {\n  password: 'lamepassword',\n  mindset: 'NY'\n}\n\n//\n// Log the initial object.\n//\nconsole.log('Initial object to be extended:');\nconsole.dir(obj);\n\n//\n// Add two properties to the empty object: username and email\n//\nprompt.addProperties(obj, ['username', 'email'], function (err) {\n  //\n  // Log the results.\n  //\n  console.log('Updated object received:');\n  console.dir(obj);\n});\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\nvar prompt = require(\"prompt\");\n//\n// The colors module adds color properties to String.prototype\n//\nrequire(\"colors\");\n\n//\n// Setting these properties customizes the prompt.\n//\nprompt.message = \"Question!\".rainbow;\nprompt.delimiter = \"><\".green;\n\nprompt.start();\n\nprompt.get({\n  properties: {\n    name: {\n      description: \"What is your name?\".magenta\n    }\n  }\n}, function (err, result) {\n  console.log(\"You said your name is: \".cyan + result.name.cyan);\n});\n```\n\n## Running tests\n```\nvows test/*-test.js --spec\n```\n\n#### Author: [Charlie Robbins][1]\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n[1]: http://nodejitsu.com\n","directories":{}},"0.2.1":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.1","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"utile":"0.1.x","colors":"0.x.x","pkginfo":"0.x.x","winston":"0.6.x","revalidator":"0.1.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.4.0"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.2.1","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.6.18","_defaultsLoaded":true,"dist":{"shasum":"a391febda287c97c527f8b4dc3a5faed1c7ad961","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.1.tgz"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Installation\n\n### Installing npm (node package manager)\n```\ncurl http://npmjs.org/install.sh | sh\n```\n\n### Installing prompt\n```\n[sudo] npm install prompt\n```\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\nvar prompt = require('prompt');\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get(['username', 'email'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  email: ' + result.email);\n})\n```\n\nThis will result in the following command-line output:\n\n```\n$ node examples/simple-prompt.js \nprompt: username: some-user\nprompt: email: some-user@some-place.org\nCommand-line input received:\n  username: some-user\n  email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\nvar schema = {\n  properties: {\n    name: {\n      pattern: /^[a-zA-Z\\s\\-]+$/,\n      message: 'Name must be only letters, spaces, or dashes',\n      required: true\n    },\n    password: {\n      hidden: true\n    }\n  }\n};\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: email, password\n//\nprompt.get(schema, function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  name: ' + result.name);\n  console.log('  password: ' + result.password);\n});\n```\n\nPretty easy right? The output from the above script is: \n\n```\n$ node examples/property-prompt.js\nprompt: name: nodejitsu000\nerror:  Invalid input for name\nerror:  Name must be only letters, spaces, or dashes\nprompt: name: Nodejitsu Inc\nprompt: password: \nCommand-line input received:\n  name: Nodejitsu Inc\n  password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n{\n  description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n  pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n  message: 'Password must be letters', // Warning message to display if validation fails.\n  hidden: true,                        // If true, characters entered will not be output to console.\n  default: 'lamepassword',             // Default value to use if no value is entered.\n  required: true                        // If true, value entered must be non-empty.\n}\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\nvar prompt = require('../lib/prompt');\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and password\n//\nprompt.get([{\n    name: 'username',\n    required: true\n  }, {\n    name: 'password',\n    hidden: true,\n    conform: function (value) {\n      return true;\n    }\n  }], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  password: ' + result.password);\n});\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n//prompt-override.js\n\nvar prompt = require('prompt'),\n    optimist = require('optimist')\n\n//\n// set the overrides\n//\nprompt.override = optimist.argv\n\n//\n// Start the prompt\n//\nprompt.start();\n\n//\n// Get two properties from the user: username and email\n//\nprompt.get(['username', 'email'], function (err, result) {\n  //\n  // Log the results.\n  //\n  console.log('Command-line input received:');\n  console.log('  username: ' + result.username);\n  console.log('  email: ' + result.email);\n})\n\n//: node prompt-override.js --username USER --email EMAIL\n\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\nvar obj = {\n  password: 'lamepassword',\n  mindset: 'NY'\n}\n\n//\n// Log the initial object.\n//\nconsole.log('Initial object to be extended:');\nconsole.dir(obj);\n\n//\n// Add two properties to the empty object: username and email\n//\nprompt.addProperties(obj, ['username', 'email'], function (err) {\n  //\n  // Log the results.\n  //\n  console.log('Updated object received:');\n  console.dir(obj);\n});\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\nvar prompt = require(\"prompt\");\n//\n// The colors module adds color properties to String.prototype\n//\nrequire(\"colors\");\n\n//\n// Setting these properties customizes the prompt.\n//\nprompt.message = \"Question!\".rainbow;\nprompt.delimiter = \"><\".green;\n\nprompt.start();\n\nprompt.get({\n  properties: {\n    name: {\n      description: \"What is your name?\".magenta\n    }\n  }\n}, function (err, result) {\n  console.log(\"You said your name is: \".cyan + result.name.cyan);\n});\n```\n\n## Running tests\n```\nvows test/*-test.js --spec\n```\n\n#### Author: [Charlie Robbins][1]\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n[1]: http://nodejitsu.com\n","directories":{}},"0.2.2":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.2","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"https://github.com/indexzero/read/tarball/refactor-optional-streams","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.2.2","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.8.1","_defaultsLoaded":true,"dist":{"shasum":"bb8c8b998c444bf8b79ace018b44d169c1d55920","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.2.tgz"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","directories":{}},"0.2.3":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.3","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"0.1.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.2.3","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.8.1","_defaultsLoaded":true,"dist":{"shasum":"eebdabba772b93a79dce761fd93763f962227d9f","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.3.tgz"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","directories":{}},"0.2.4":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.4","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"}],"repository":{"type":"git","url":"http://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"1.0.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","_id":"prompt@0.2.4","dist":{"shasum":"fc399928145a12f4bac043a6cbcbab8816451d86","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.4.tgz"},"directories":{}},"0.2.5":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.5","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"}],"repository":{"type":"git","url":"git://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"1.0.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"_npmUser":{"name":"indexzero","email":"charlie.robbins@gmail.com"},"_id":"prompt@0.2.5","optionalDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.2","_nodeVersion":"v0.8.6","_defaultsLoaded":true,"dist":{"shasum":"3b4d5a83c0f785e250dd86b81c7452df998cb4e2","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.5.tgz"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","directories":{}},"0.2.6":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.6","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"},{"name":"fedor.indutny","email":"fedor.indutny@gmail.com"}],"repository":{"type":"git","url":"http://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"1.0.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","_id":"prompt@0.2.6","dist":{"shasum":"1136549ea0a848c9dff8ef3acf3f71c9a94d8465","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.6.tgz"},"directories":{}},"0.2.7":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.7","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"},{"name":"fedor.indutny","email":"fedor.indutny@gmail.com"},{"name":"marak","email":"marak.squires@gmail.com"}],"repository":{"type":"git","url":"http://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"1.0.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","_id":"prompt@0.2.7","dist":{"shasum":"a4aa2f04dbbfa9eee4d658d59e5f32bde10dc01d","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.7.tgz"},"directories":{}},"0.2.8":{"name":"prompt","description":"A beautiful command-line prompt for node.js","version":"0.2.8","author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"},{"name":"fedor.indutny","email":"fedor.indutny@gmail.com"}],"repository":{"type":"git","url":"http://github.com/flatiron/prompt.git"},"dependencies":{"pkginfo":"0.x.x","read":"1.0.x","revalidator":"0.1.x","utile":"0.1.x","winston":"0.6.x"},"devDependencies":{"vows":"0.6.x"},"main":"./lib/prompt","scripts":{"test":"vows test/prompt-test.js --spec","test-all":"vows --spec"},"engines":{"node":">= 0.6.6"},"readme":"# prompt [![Build Status](https://secure.travis-ci.org/flatiron/prompt.png)](http://travis-ci.org/flatiron/prompt)\n\nA beautiful command-line prompt for node.js\n\n## Features\n\n* prompts the user for input\n* supports validation and defaults\n* hides passwords\n\n## Usage\nUsing prompt is relatively straight forward. There are two core methods you should be aware of: `prompt.get()` and `prompt.addProperties()`. There methods take strings representing property names in addition to objects for complex property validation (and more). There are a number of [examples][0] that you should examine for detailed usage.\n\n### Getting Basic Prompt Information\nGetting started with `prompt` is easy. Lets take a look at `examples/simple-prompt.js`:\n\n``` js\n  var prompt = require('prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  });\n```\n\nThis will result in the following command-line output:\n\n```\n  $ node examples/simple-prompt.js \n  prompt: username: some-user\n  prompt: email: some-user@some-place.org\n  Command-line input received:\n    username: some-user\n    email: some-user@some-place.org\n```\n\n### Prompting with Validation, Default Values, and More (Complex Properties)\nIn addition to prompting the user with simple string prompts, there is a robust API for getting and validating complex information from a command-line prompt. Here's a quick sample:\n\n``` js\n  var schema = {\n    properties: {\n      name: {\n        pattern: /^[a-zA-Z\\s\\-]+$/,\n        message: 'Name must be only letters, spaces, or dashes',\n        required: true\n      },\n      password: {\n        hidden: true\n      }\n    }\n  };\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: email, password\n  //\n  prompt.get(schema, function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  name: ' + result.name);\n    console.log('  password: ' + result.password);\n  });\n```\n\nPretty easy right? The output from the above script is: \n\n```\n  $ node examples/property-prompt.js\n  prompt: name: nodejitsu000\n  error:  Invalid input for name\n  error:  Name must be only letters, spaces, or dashes\n  prompt: name: Nodejitsu Inc\n  prompt: password: \n  Command-line input received:\n    name: Nodejitsu Inc\n    password: some-password  \n```\n\n## Valid Property Settings\n`prompt` understands JSON-schema with a few extra parameters and uses [revalidator](https://github.com/flatiron/revalidator) for validation.\n\nHere's an overview of the properties that may be used for validation and prompting controls:\n\n``` js\n  {\n    description: 'Enter your password',     // Prompt displayed to the user. If not supplied name will be used.\n    pattern: /^\\w+$/,                  // Regular expression that input must be valid against.\n    message: 'Password must be letters', // Warning message to display if validation fails.\n    hidden: true,                        // If true, characters entered will not be output to console.\n    default: 'lamepassword',             // Default value to use if no value is entered.\n    required: true                        // If true, value entered must be non-empty.\n    before: function(value) { return 'v' + value; } // Runs before node-prompt callbacks. It modifies user's input\n  }\n```\n\nAlternatives to `pattern` include `format` and `conform`, as documented in [revalidator](https://github.com/flatiron/revalidator).\n\n### Alternate Validation API:\n\nPrompt, in addition to iterating over JSON-Schema properties, will also happily iterate over an array of validation objects given an extra 'name' property:\n\n```js\n  var prompt = require('../lib/prompt');\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and password\n  //\n  prompt.get([{\n      name: 'username',\n      required: true\n    }, {\n      name: 'password',\n      hidden: true,\n      conform: function (value) {\n        return true;\n      }\n    }], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  password: ' + result.password);\n  });\n```\n\n### Backward Compatibility\n\nNote that, while this structure is similar to that used by prompt 0.1.x, that the object properties use the same names as in JSON-Schema. prompt 0.2.x is backward compatible with prompt 0.1.x except for asynchronous validation.\n\n### Skipping Prompts\n\nSometimes power users may wish to skip promts and specify all data as command line options. \nif a value is set as a property of `prompt.override` prompt will use that instead of \nprompting the user.\n\n``` js\n  //prompt-override.js\n\n  var prompt = require('prompt'),\n      optimist = require('optimist')\n\n  //\n  // set the overrides\n  //\n  prompt.override = optimist.argv\n\n  //\n  // Start the prompt\n  //\n  prompt.start();\n\n  //\n  // Get two properties from the user: username and email\n  //\n  prompt.get(['username', 'email'], function (err, result) {\n    //\n    // Log the results.\n    //\n    console.log('Command-line input received:');\n    console.log('  username: ' + result.username);\n    console.log('  email: ' + result.email);\n  })\n\n  //: node prompt-override.js --username USER --email EMAIL\n```\n\n\n### Adding Properties to an Object \nA common use-case for prompting users for data from the command-line is to extend or create a configuration object that is passed onto the entry-point method for your CLI tool. `prompt` exposes a convenience method for doing just this: \n\n``` js\n  var obj = {\n    password: 'lamepassword',\n    mindset: 'NY'\n  }\n\n  //\n  // Log the initial object.\n  //\n  console.log('Initial object to be extended:');\n  console.dir(obj);\n\n  //\n  // Add two properties to the empty object: username and email\n  //\n  prompt.addProperties(obj, ['username', 'email'], function (err) {\n    //\n    // Log the results.\n    //\n    console.log('Updated object received:');\n    console.dir(obj);\n  });\n```\n\n## Customizing your prompt\nAside from changing `property.message`, you can also change `prompt.message`\nand `prompt.delimiter` to change the appearance of your prompt.\n\nThe basic structure of a prompt is this:\n\n``` js\nprompt.message + prompt.delimiter + property.message + prompt.delimiter;\n```\n\nThe default `prompt.message` is \"prompt,\" the default `prompt.delimiter` is\n\": \", and the default `property.message` is `property.name`.\nChanging these allows you to customize the appearance of your prompts! In\naddition, prompt supports ANSI color codes via the\n[colors module](https://github.com/Marak/colors.js) for custom colors. For a\nvery colorful example:\n\n``` js\n  var prompt = require(\"prompt\");\n\n  //\n  // Setting these properties customizes the prompt.\n  //\n  prompt.message = \"Question!\".rainbow;\n  prompt.delimiter = \"><\".green;\n\n  prompt.start();\n\n  prompt.get({\n    properties: {\n      name: {\n        description: \"What is your name?\".magenta\n      }\n    }\n  }, function (err, result) {\n    console.log(\"You said your name is: \".cyan + result.name.cyan);\n  });\n```\n\nIf you don't want colors, you can set\n\n```js\nvar prompt = require('prompt');\n\nprompt.colors = false;\n```\n\n## Installation\n\n``` bash\n  $ [sudo] npm install prompt\n```\n\n## Running tests\n\n``` bash \n  $ npm test\n```\n\n#### License: MIT\n#### Author: [Charlie Robbins](http://github.com/indexzero)\n#### Contributors: [Josh Holbrook](http://github.com/jesusabdullah), [Pavan Kumar Sunkara](http://github.com/pksunkara)\n\n[0]: https://github.com/flatiron/prompt/tree/master/examples\n","_id":"prompt@0.2.8","dist":{"shasum":"012bfe09f036c4e6520425a8101efc89a5c86430","tarball":"http://registry.npmjs.org/prompt/-/prompt-0.2.8.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},"directories":{}}},"maintainers":[{"name":"jesusabdullah","email":"josh.holbrook@gmail.com"},{"name":"indexzero","email":"charlie.robbins@gmail.com"},{"name":"mmalecki","email":"me@mmalecki.com"},{"name":"fedor.indutny","email":"fedor.indutny@gmail.com"}],"author":{"name":"Nodejitsu Inc.","email":"info@nodejitsu.com"},"repository":{"type":"git","url":"http://github.com/flatiron/prompt.git"},"time":{"0.0.1":"2011-03-18T15:06:40.016Z","0.0.2":"2011-03-18T15:06:40.016Z","0.0.3":"2011-03-18T15:06:40.016Z","0.0.4":"2011-05-12T20:17:03.854Z","0.1.0":"2011-05-30T06:07:01.561Z","0.1.1":"2011-06-08T03:18:31.595Z","0.1.2":"2011-06-22T04:44:10.998Z","0.1.3":"2011-06-29T18:26:45.199Z","0.1.4":"2011-08-09T01:55:30.907Z","0.1.5":"2011-08-10T03:47:55.099Z","0.1.7":"2011-08-22T00:35:01.001Z","0.1.8":"2011-09-12T17:46:31.781Z","0.1.9":"2011-09-26T00:06:28.170Z","0.1.10":"2011-10-25T19:50:43.191Z","0.1.11":"2011-12-05T23:19:19.802Z","0.1.12":"2012-01-04T05:04:02.889Z","0.2.0":"2012-06-16T05:30:30.310Z","0.2.1":"2012-06-16T15:38:43.289Z","0.2.2":"2012-07-08T08:57:48.776Z","0.2.3":"2012-07-27T06:07:26.623Z","0.2.4":"2012-08-02T21:07:05.907Z","0.2.5":"2012-08-12T00:49:28.589Z","0.2.6":"2012-08-12T16:31:54.285Z","0.2.7":"2012-08-30T19:45:32.655Z","0.2.8":"2012-10-21T23:23:02.750Z"},"users":{"blakmatrix":true,"fgribreau":true},"_etag":"\"EJXI5G97VVLR9C2T6RLXO3P3\""}